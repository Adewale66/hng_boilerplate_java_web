name: Dev-Deployment

on:
  workflow_run:
    workflows: [CI]
    types:
      - completed
    branches: [dev]

jobs:
  on-success:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion=='success' && github.event.workflow_run.head_branch == 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          
      - name: Create .env file
        run: |
          echo "DB_CONNECTION_STRING=postgresql://development-postgresdb:5432/${{ secrets.POSTGRES_DEV_DB }}" >> .env
          echo "DB_USERNAME=${{ secrets.POSTGRES_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env 
          echo "RABBITMQ_PORT=${{ secrets.RABBITMQ_PORT }}" >> .env
          echo "RABBITMQ_USERNAME=${{ secrets.RABBITMQ_USERNAME }}" >> .env
          echo "RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}" >> .env
          echo "RABBITMQ_HOST=${{ secrets.RABBITMQ_DEV_HOST }}" >> .env
          echo "ACCOUNT_SID=${{ secrets.ACCOUNT_SID }}" >> .env
          echo "AUTH_TOKEN=${{ secrets.AUTH_TOKEN }}" >> .env
          echo "SMS_NUMBER=${{ secrets.SMS_NUMBER }}" >> .env
          echo "JWT_TOKEN=${{ secrets.JWT_TOKEN }}" >> .env
          echo "GOOGLE_ID_KEY=${{ secrets.GOOGLE_ID_KEY }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "PAYSTACK_KEY=${{ secrets.PAYSTACK_KEY }}" >> .env
          echo "FLUTTERWAVE_KEY=${{ secrets.FLUTTERWAVE_KEY }}" >> .env

      - name: Create application.properties
        uses: ./.github/workflows/container-application-properties
                  
      - name: Compose Build Docker image
        run: |
          export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          export POSTGRES_DEV_DB=${{ secrets.POSTGRES_DEV_DB }}
          export RABBITMQ_USER=${{ secrets.RABBITMQ_USERNAME }}
          export RABBITMQ_HOST=${{ secrets.RABBITMQ_DEV_HOST }}
          export RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}
          docker compose -f docker-compose.yml build

      - name: Verify Docker images
        run: |
          docker images
          if ! docker images | grep -q 'development_backend'; then
            echo "Backend image not found. Build may have failed."
            exit 1
          fi
      
      - name: List Docker images
        run: docker images

      - name: Save and compress Docker images
        run: |
          export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          export POSTGRES_DEV_DB=${{ secrets.POSTGRES_DEV_DB }}
          export RABBITMQ_USER=${{ secrets.RABBITMQ_USERNAME }}
          export RABBITMQ_HOST=${{ secrets.RABBITMQ_DEV_HOST }}
          export RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}
          
          # Save each image individually
          docker save postgres > postgres.tar
          docker save rabbitmq:3-management > rabbitmq.tar
          docker save development_backend > backend.tar
          
          # Combine and compress the tar files
          tar -cvf development-images.tar postgres.tar rabbitmq.tar backend.tar
          gzip development-images.tar
          
          # Clean up individual tar files
          rm postgres.tar rabbitmq.tar backend.tar
      
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-images
          path: development-images.tar.gz
      
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: docker-images
          path: .
      
      - name: Copy to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.DEV_SSH_USERNAME }}
          password: ${{ secrets.DEV_SSH_PASSWORD }}
          source: "development-images.tar.gz"
          target: "~/hng_boilerplate_java_web"

      - name: Deploy on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.DEV_SSH_USERNAME }}
          password: ${{ secrets.DEV_SSH_PASSWORD }}
          script: |
            cd ~/hng_boilerplate_java_web
            gunzip development-images.tar.gz
            docker load < development-images.tar
            rm -f development-images.tar
            chmod +x ./scripts/dev-deploy.sh
            ./scripts/dev-deploy.sh 

  on-failure:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion=='failure' }}
    steps:
      - run: echo "Triggering the Workflow Failed"
